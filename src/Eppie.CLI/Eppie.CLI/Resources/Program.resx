<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Header.Description" xml:space="preserve">
    <value>Application started. Press Ctrl+C to shut down.</value>
    <comment>Application description and additional information.</comment>
  </data>
  <data name="Header.LogoFormat" xml:space="preserve">
    <value>Hello, I'm {0} (version {1})</value>
    <comment>The startup banner or the copyright message.
{0} is a parameter containing the title of the application;
{1} is a parameter containing the version of the application.</comment>
  </data>
  <data name="Message.Goodbye" xml:space="preserve">
    <value>Application is shutting down...</value>
    <comment>Application farewell message.</comment>
  </data>
  <data name="Menu.ExitDescription" xml:space="preserve">
    <value>Exit the application.</value>
    <comment>Description of the 'exit' command in the help.</comment>
  </data>
  <data name="Menu.InitDescription" xml:space="preserve">
    <value>Initialize the application and create Eppie account.</value>
    <comment>Description of the 'init' command in the help.</comment>
  </data>
  <data name="Menu.OpenDescription" xml:space="preserve">
    <value>Open an existing Eppie account.</value>
    <comment>Description of the 'open' command in the help.</comment>
  </data>
  <data name="Menu.ResetDescription" xml:space="preserve">
    <value>Reset the application and erase all of its data.</value>
    <comment>Description of the 'reset' command in the help.</comment>
  </data>
  <data name="Error.UnhandledException" xml:space="preserve">
    <value>An error has occurred: 
{0}</value>
    <comment>{0} contains error information.</comment>
  </data>
  <data name="Message.SeedPhraseFooter" xml:space="preserve">
    <value>IMPORTANT, copy and keep it in secret.</value>
  </data>
  <data name="Message.SeedPhraseHeader" xml:space="preserve">
    <value>The application has been initialized. Your seed phrase is</value>
  </data>
  <data name="Warning.InvalidPassword" xml:space="preserve">
    <value>Warning: Invalid password.</value>
    <comment>This message warns the user that the password is incorrect.</comment>
  </data>
  <data name="Warning.SecondInitialization" xml:space="preserve">
    <value>Warning: The application has already been initialized.</value>
    <comment>This message warns the user that a second initialization is being attempted.</comment>
  </data>
  <data name="Error.ImpossibleInitialization" xml:space="preserve">
    <value>Error: The application could not be initialized.</value>
    <comment>This message alerts the user that the application cannot be initialized.</comment>
  </data>
  <data name="Message.AppOpened" xml:space="preserve">
    <value>The application was opened successfully.</value>
    <comment>This message indicates to the user that the application has opened.</comment>
  </data>
  <data name="Message.AppReset" xml:space="preserve">
    <value>The application has just been reset.</value>
    <comment>This message indicates to the user that the application has been reset to default settings and privacy data has been removed.</comment>
  </data>
  <data name="Message.AskPassword" xml:space="preserve">
    <value>Enter the vault password: </value>
    <comment>This message prompts the user to enter the vault password.</comment>
  </data>
  <data name="Message.ConfirmPassword" xml:space="preserve">
    <value>Confirm your vault password: </value>
    <comment>This message prompts the user to confirm the vault password.</comment>
  </data>
  <data name="Warning.Uninitialized" xml:space="preserve">
    <value>Warning: The application hasn't been initialized yet.</value>
    <comment>This message warns the user that the application hasn't been initialized yet.</comment>
  </data>
  <data name="Message.AskAccountAddress" xml:space="preserve">
    <value>Enter account address: </value>
    <comment>This message prompts the user to enter the service account address.</comment>
  </data>
  <data name="Message.AskAccountPassword" xml:space="preserve">
    <value>Enter account password: </value>
    <comment>This message prompts the user to enter the service account password.</comment>
  </data>
  <data name="Message.AskIMAPServer" xml:space="preserve">
    <value>Enter IMAP server: </value>
    <comment>This message prompts the user to enter the IMAP server address.</comment>
  </data>
  <data name="Message.AskSMTPServer" xml:space="preserve">
    <value>Enter SMTP server: </value>
    <comment>This message prompts the user to enter the SMTP server address.</comment>
  </data>
  <data name="Menu.AddAccountDescription" xml:space="preserve">
    <value>Add a service account.</value>
    <comment>Description of the 'add-account' command in the help.</comment>
  </data>
  <data name="Menu.ListAccountsDescription" xml:space="preserve">
    <value>Display a list of accounts.</value>
    <comment>Description of the 'list-accounts' command in the help.</comment>
  </data>
  <data name="Message.EmptyAccountList" xml:space="preserve">
    <value>There are no accounts yet.</value>
    <comment>This message informs the user that no service accounts were added.</comment>
  </data>
  <data name="Message.HeaderAccountList" xml:space="preserve">
    <value>Accounts:</value>
    <comment>This is the header for the list of accounts.</comment>
  </data>
  <data name="Message.AppRestored" xml:space="preserve">
    <value>Your Eppie account has been restored successfully.</value>
    <comment>This message indicates to the user that the application has been restored from a backup.</comment>
  </data>
  <data name="Message.AskSeedPhrase" xml:space="preserve">
    <value>Enter seed phrase: </value>
    <comment>This message prompts the user to enter a seed phrase.</comment>
  </data>
  <data name="Message.ConfirmReset" xml:space="preserve">
    <value>All local data will be lost. Do you want to continue? (y/n): </value>
    <comment>This message prompts the user to confirm to reset the application.</comment>
  </data>
  <data name="MenuOption.ReceiverDescription" xml:space="preserve">
    <value>Receiver address</value>
    <comment>Description of the “send” command option in the help.</comment>
  </data>
  <data name="MenuOption.SenderDescription" xml:space="preserve">
    <value>Sender address</value>
    <comment>Description of the “send” command option in the help.</comment>
  </data>
  <data name="MenuOption.SubjectDescription" xml:space="preserve">
    <value>Message subject</value>
    <comment>Description of the “send” command option in the help.</comment>
  </data>
  <data name="Message.AskNewPassword" xml:space="preserve">
    <value>Enter your new vault password: </value>
    <comment>This message prompts the user to enter a new vault password.</comment>
  </data>
  <data name="Message.AskRestorePath" xml:space="preserve">
    <value>Enter the restore URI: </value>
    <comment>This message prompts the user to enter the path to the backup.</comment>
  </data>
  <data name="Menu.RestoreDescription" xml:space="preserve">
    <value>Restore your Eppie account.</value>
    <comment>Description of the 'restore' command in the help.</comment>
  </data>
  <data name="Menu.SendDescription" xml:space="preserve">
    <value>Send a message</value>
    <comment>Description of the 'send' command in the help.</comment>
  </data>
  <data name="MenuOption.AccountTypeDescription" xml:space="preserve">
    <value>Type of account</value>
    <comment>Description of the “add-account” command option in the help.</comment>
  </data>
  <data name="Menu.Description" xml:space="preserve">
    <value>{0} (version {1})</value>
    <comment>Description of the main menu in the help.
{0} is a parameter containing the title of the application;
{1} is a parameter containing the version of the application.</comment>
  </data>
  <data name="Message.AskMessageBody" xml:space="preserve">
    <value>Enter a text message: </value>
    <comment>This message prompts the user to enter a text message.</comment>
  </data>
</root>