###############################
# Core EditorConfig Options   #
###############################

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options

root = true


#### All files ####
[*]

## Indentation and spacing
indent_style = space
tab_width = 4
indent_size = 4
trim_trailing_whitespace = true

## New line preferences
end_of_line = unset
insert_final_newline = true


#### Specific files ####

## Code files
[*.{cs,csx,vb,vbx}]
indent_size = 4
insert_final_newline = true
charset = utf-8-bom

## C++ Files
[*.{cpp,h,in}]
indent_size = 4
curly_bracket_next_line = true
indent_brace_style = Allman

## Xml project files
[*.{csproj,vbproj,vcxproj,vcxproj.filters,proj,nativeproj,locproj}]
indent_size = 2

## Xml build files
[*.builds]
indent_size = 2

## Xml files
[*.{xml,stylecop,resx,ruleset}]
indent_size = 2

## Xml config files
[*.{props,targets,config,nuspec}]
indent_size = 2

## Shell scripts
[*.{sh,bash}]
end_of_line = lf

[*.{cmd,bat,ps1}]
end_of_line = crlf

## Markdown files
[*.md]
# Double trailing spaces can be used for BR tags, and other instances are enforced by Markdownlint
trim_trailing_whitespace = false

## Generated files
#[*{.generated.cs,.g.cs}]
#generated_code = true


###############################
# C# Coding Conventions       #
###############################

[*.cs]

#### C# header and usings ####

# IDE0073: Require file header
file_header_template = ---------------------------------------------------------------------------- //\n                                                                             //\n  Copyright 2024 Eppie (https://eppie.io)                                    //\n                                                                             //\n  Licensed under the Apache License, Version 2.0 (the "License"),            //\n  you may not use this file except in compliance with the License.           //\n  You may obtain a copy of the License at                                    //\n                                                                             //\n      http://www.apache.org/licenses/LICENSE-2.0                             //\n                                                                             //\n  Unless required by applicable law or agreed to in writing, software        //\n  distributed under the License is distributed on an "AS IS" BASIS,          //\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   //\n  See the License for the specific language governing permissions and        //\n  limitations under the License.                                             //\n                                                                             //\n---------------------------------------------------------------------------- //
dotnet_separate_import_directive_groups = true                      # IDE0055: Formatting rule
dotnet_sort_system_directives_first = true                          # IDE0055: Formatting rule


#### Whitespace ####

## Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

## New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

## Space preferences
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_between_parentheses = false
csharp_space_after_cast = false
csharp_space_around_declaration_statements = false
csharp_space_before_open_square_brackets = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_square_brackets = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_semicolon_in_for_statement = true
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_around_binary_operators = before_and_after

## Wrapping preferences
csharp_preserve_single_line_blocks = true
csharp_preserve_single_line_statements = false


#### Code Style ####

## 'using' directive preferences
csharp_using_directive_placement = outside_namespace:warning        # IDE0065: 'using' directive placement

## Code-block preferences
csharp_prefer_simple_using_statement = true:warning                 # IDE0063: Use simple using statement
csharp_prefer_braces = true:warning                                 # IDE0011: Add braces
csharp_style_namespace_declarations = block_scoped:warning          # IDE0160: Use block-scoped namespace, IDE0161: Use file-scoped namespace
csharp_style_prefer_method_group_conversion = true:warning          # IDE0200: Remove unnecessary lambda expression
csharp_style_prefer_top_level_statements = true:silent              # IDE0210: Convert to top-level statements, IDE0211: Convert to 'Program.Main' style program
csharp_style_prefer_primary_constructors = true:error               # IDE0290  Use primary constructor [note: C# 12 feature]

## Expression-bodied members
csharp_style_expression_bodied_methods = false:warning              # IDE0022: Use expression body for methods
csharp_style_expression_bodied_constructors = false:warning         # IDE0021: Use expression body for constructors
csharp_style_expression_bodied_operators = false:warning            # IDE0023: Use expression body for conversion operators, IDE0024: Use block body for operators
csharp_style_expression_bodied_properties = true:warning            # IDE0025: Use expression body for properties
csharp_style_expression_bodied_indexers = true:warning              # IDE0026: Use expression body for indexers
csharp_style_expression_bodied_accessors = true:warning             # IDE0027: Use expression body for accessors
csharp_style_expression_bodied_lambdas = true:warning               # IDE0053: Use expression body for lambdas
csharp_style_expression_bodied_local_functions = false:warning      # IDE0061: Use expression body for local functions

## Expression-level preferences
csharp_style_throw_expression = true:warning                                                # IDE0016: Use throw expression
csharp_style_prefer_null_check_over_type_check = true:warning                               # IDE0150: Prefer 'null' check over type check
csharp_prefer_simple_default_expression = true:warning                                      # IDE0034: Simplify 'default' expression
csharp_style_prefer_local_over_anonymous_function = true:warning                            # IDE0039: Use local function instead of lambda
csharp_style_pattern_local_over_anonymous_function = true:suggestion                        # ???
csharp_style_prefer_index_operator = true:warning                                           # IDE0056: Use index operator
csharp_style_prefer_range_operator = true:warning                                           # IDE0057: Use range operator
csharp_style_implicit_object_creation_when_type_is_apparent = true:warning                  # IDE0090: Simplify 'new' expression
csharp_style_prefer_tuple_swap = true:warning                                               # IDE0180: Use tuple to swap values
csharp_style_prefer_utf8_string_literals = true:suggestion                                  # IDE0230: Use UTF-8 string literal
csharp_style_inlined_variable_declaration = true:warning                                    # IDE0018: Inline variable declaration
csharp_style_deconstructed_variable_declaration = true:suggestion                           # IDE0042: Deconstruct variable declaration
csharp_style_unused_value_assignment_preference = discard_variable:warning                  # IDE0059: Remove unnecessary value assignment
csharp_style_unused_value_expression_statement_preference = discard_variable:silent         # IDE0058: Remove unnecessary expression value

## Modifier preferences
csharp_prefer_static_local_function = true:warning                                          # IDE0062: Make local function static
csharp_style_prefer_readonly_struct = true:warning                                          # IDE0250: Struct can be made 'readonly'
csharp_style_prefer_readonly_struct_member = true:warning                                   # IDE0251: Member can be made 'readonly'
csharp_preferred_modifier_order = public,private,protected,internal,file,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning      # IDE0036: Order modifiers

## New line preferences
csharp_style_allow_embedded_statements_on_same_line_experimental = false:warning                    # IDE2001: Allow embedded statements on same line
csharp_style_allow_blank_lines_between_consecutive_braces_experimental = false:warning              # IDE2002: Allow blank lines between consecutive braces
csharp_style_allow_blank_line_after_colon_in_constructor_initializer_experimental = false:error     # IDE2004: Allow blank line after colon in constructor initializer
csharp_style_allow_blank_line_after_token_in_conditional_expression_experimental = false:warning    # IDE2005: Allow blank line after token in conditional expression
csharp_style_allow_blank_line_after_token_in_arrow_expression_clause_experimental = false:warning   # IDE2006: Allow blank line after token in arrow expression

## Null-checking preferences
csharp_style_conditional_delegate_call = true:warning                                       # IDE1005: Use conditional delegate call

## Pattern matching preferences
csharp_style_prefer_switch_expression = true:warning                                        # IDE0066: Use switch expression
csharp_style_prefer_pattern_matching = true:warning                                         # IDE0078: Use pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:warning                        # IDE0020: Use pattern matching to avoid 'is' check followed by a cast (with variable), IDE0038: Use pattern matching to avoid 'is' check followed by a cast (without variable)
csharp_style_pattern_matching_over_as_with_null_check = true:warning                        # IDE0019: Use pattern matching to avoid 'as' followed by a 'null' check, IDE0260: Use pattern matching
csharp_style_prefer_not_pattern = true:warning                                              # IDE0083: Use pattern matching ('not' operator)
csharp_style_prefer_extended_property_pattern = true:warning                                # IDE0170: Simplify property pattern

## var preferences
csharp_style_var_for_built_in_types = false:warning                                         # IDE0007: Use 'var' instead of explicit type, IDE0008: Use explicit type instead of 'var'
csharp_style_var_when_type_is_apparent = false:warning                                      # IDE0007: Use 'var' instead of explicit type, IDE0008: Use explicit type instead of 'var'
csharp_style_var_elsewhere = false:warning                                                  # IDE0007: Use 'var' instead of explicit type, IDE0008: Use explicit type instead of 'var'



###############################
# .NET Coding Conventions     #
###############################

[*.{cs,vb}]

#### Whitespace ####

## Expression-level preferences
dotnet_style_operator_placement_when_wrapping = end_of_line


#### Code Style ####

## Expression-level preferences
dotnet_style_coalesce_expression = true:warning                                             # IDE0029: Null check can be simplified (ternary conditional check), IDE0030: Null check can be simplified (nullable ternary conditional check), IDE0270: Null check can be simplified (if null check)
dotnet_style_null_propagation = true:warning                                                # IDE0031: Use null propagation
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:warning             # IDE0041: Use 'is null' check
dotnet_style_prefer_auto_properties = true:warning                                          # IDE0032: Use auto-implemented property
dotnet_style_object_initializer = true:warning                                              # IDE0017: Use object initializers
dotnet_style_collection_initializer = true:warning                                          # IDE0028: Use collection initializers
dotnet_style_prefer_simplified_boolean_expressions = true:warning                           # IDE0075: Simplify conditional expression
dotnet_style_prefer_conditional_expression_over_assignment = true:warning                   # IDE0045: Use conditional expression for assignment
dotnet_style_prefer_conditional_expression_over_return = true:warning                       # IDE0046: Use conditional expression for return
dotnet_style_explicit_tuple_names = true:warning                                            # IDE0033: Use explicitly provided tuple name
dotnet_style_prefer_inferred_tuple_names = true:warning                                     # IDE0037: Use inferred member names
dotnet_style_prefer_inferred_anonymous_type_member_names = true:warning                     # IDE0037: Use inferred member names
dotnet_style_prefer_compound_assignment = true:warning                                      # IDE0054: Use compound assignment, IDE0074: Use coalesce compound assignment
dotnet_style_prefer_simplified_interpolation = true:warning                                 # IDE0071: Simplify interpolation
dotnet_style_namespace_match_folder = true:warning                                          # IDE0130: Namespace does not match folder structure
dotnet_style_prefer_foreach_explicit_cast_in_source = when_strongly_typed:warning           # IDE0220: Add explicit cast in foreach loop

## Field preferences
dotnet_style_readonly_field = true:warning                                                  # IDE0044: Add readonly modifier

## Language keywords vs BCL types preferences
dotnet_style_predefined_type_for_locals_parameters_members = true:warning                   # IDE0049: Use language keywords instead of framework type names for type references
dotnet_style_predefined_type_for_member_access = true:warning                               # IDE0049: Use language keywords instead of framework type names for type references

## Modifier preferences
dotnet_style_require_accessibility_modifiers = for_non_interface_members:warning            # IDE0040: Add accessibility modifiers

## New line preferences
dotnet_style_allow_multiple_blank_lines_experimental = false:warning                        # IDE2000: Allow multiple blank lines
dotnet_style_allow_statement_immediately_after_block_experimental = false:warning           # IDE2003: Allow statement immediately after block

## Parameter preferences
dotnet_code_quality_unused_parameters = all:suggestion                                      # IDE0060: Remove unused parameter

## Parentheses preferences
dotnet_style_parentheses_in_arithmetic_binary_operators = always_for_clarity:warning        # IDE0047: Remove unnecessary parentheses, # IDE0048: Add parentheses for clarity
dotnet_style_parentheses_in_other_binary_operators = always_for_clarity:warning             # IDE0047: Remove unnecessary parentheses, # IDE0048: Add parentheses for clarity
dotnet_style_parentheses_in_relational_binary_operators = always_for_clarity:warning        # IDE0047: Remove unnecessary parentheses, # IDE0048: Add parentheses for clarity
dotnet_style_parentheses_in_other_operators = never_if_unnecessary:warning                  # IDE0047: Remove unnecessary parentheses, # IDE0048: Add parentheses for clarity

## this. and Me. preferences
dotnet_style_qualification_for_field = false:silent                                         # IDE0003: Remove 'this' or 'Me' qualification, IDE0009: Add 'this' or 'Me' qualification
dotnet_style_qualification_for_property = false:silent                                      # IDE0003: Remove 'this' or 'Me' qualification, IDE0009: Add 'this' or 'Me' qualification
dotnet_style_qualification_for_method = false:silent                                        # IDE0003: Remove 'this' or 'Me' qualification, IDE0009: Add 'this' or 'Me' qualification
dotnet_style_qualification_for_event = false:silent                                         # IDE0003: Remove 'this' or 'Me' qualification, IDE0009: Add 'this' or 'Me' qualification



#### Naming styles ####

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/style-rules/naming-rules

## Naming rules

dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.severity = warning
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.symbols = types_and_namespaces
dotnet_naming_rule.types_and_namespaces_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.interfaces_should_be_ipascalcase.severity = warning
dotnet_naming_rule.interfaces_should_be_ipascalcase.symbols = interfaces
dotnet_naming_rule.interfaces_should_be_ipascalcase.style = ipascalcase

dotnet_naming_rule.type_parameters_should_be_tpascalcase.severity = warning
dotnet_naming_rule.type_parameters_should_be_tpascalcase.symbols = type_parameters
dotnet_naming_rule.type_parameters_should_be_tpascalcase.style = tpascalcase

dotnet_naming_rule.methods_should_be_pascalcase.severity = warning
dotnet_naming_rule.methods_should_be_pascalcase.symbols = methods
dotnet_naming_rule.methods_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.properties_should_be_pascalcase.severity = warning
dotnet_naming_rule.properties_should_be_pascalcase.symbols = properties
dotnet_naming_rule.properties_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.events_should_be_pascalcase.severity = warning
dotnet_naming_rule.events_should_be_pascalcase.symbols = events
dotnet_naming_rule.events_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_variables_should_be_camelcase.severity = warning
dotnet_naming_rule.local_variables_should_be_camelcase.symbols = local_variables
dotnet_naming_rule.local_variables_should_be_camelcase.style = camelcase

dotnet_naming_rule.local_constants_should_be_camelcase.severity = warning
dotnet_naming_rule.local_constants_should_be_camelcase.symbols = local_constants
dotnet_naming_rule.local_constants_should_be_camelcase.style = pascalcase

dotnet_naming_rule.parameters_should_be_camelcase.severity = warning
dotnet_naming_rule.parameters_should_be_camelcase.symbols = parameters
dotnet_naming_rule.parameters_should_be_camelcase.style = camelcase

dotnet_naming_rule.public_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.public_fields_should_be_pascalcase.symbols = public_fields
dotnet_naming_rule.public_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_fields_should_be__camelcase.severity = warning
dotnet_naming_rule.private_fields_should_be__camelcase.symbols = private_fields
dotnet_naming_rule.private_fields_should_be__camelcase.style = _camelcase

dotnet_naming_rule.private_static_fields_should_be_s_camelcase.severity = warning
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.symbols = private_static_fields
dotnet_naming_rule.private_static_fields_should_be_s_camelcase.style = s_camelcase

dotnet_naming_rule.public_constant_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.symbols = public_constant_fields
dotnet_naming_rule.public_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_constant_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.symbols = private_constant_fields
dotnet_naming_rule.private_constant_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.symbols = public_static_readonly_fields
dotnet_naming_rule.public_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.severity = warning
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.symbols = private_static_readonly_fields
dotnet_naming_rule.private_static_readonly_fields_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.enums_should_be_pascalcase.severity = warning
dotnet_naming_rule.enums_should_be_pascalcase.symbols = enums
dotnet_naming_rule.enums_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.local_functions_should_be_pascalcase.severity = warning
dotnet_naming_rule.local_functions_should_be_pascalcase.symbols = local_functions
dotnet_naming_rule.local_functions_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.non_field_members_should_be_pascalcase.severity = warning
dotnet_naming_rule.non_field_members_should_be_pascalcase.symbols = non_field_members
dotnet_naming_rule.non_field_members_should_be_pascalcase.style = pascalcase

dotnet_naming_rule.async_methods_should_be_pascalcase_async.severity = none
dotnet_naming_rule.async_methods_should_be_pascalcase_async.symbols = async_methods
dotnet_naming_rule.async_methods_should_be_pascalcase_async.style = pascalcase_async

dotnet_naming_rule.local_async_functions_should_be_pascalcase_async.severity = none
dotnet_naming_rule.local_async_functions_should_be_pascalcase_async.symbols = local_async_functions
dotnet_naming_rule.local_async_functions_should_be_pascalcase_async.style = pascalcase_async

## Symbol specifications

dotnet_naming_symbols.interfaces.applicable_kinds = interface
dotnet_naming_symbols.interfaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.interfaces.required_modifiers =

dotnet_naming_symbols.enums.applicable_kinds = enum
dotnet_naming_symbols.enums.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.enums.required_modifiers =

dotnet_naming_symbols.events.applicable_kinds = event
dotnet_naming_symbols.events.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.events.required_modifiers =

dotnet_naming_symbols.methods.applicable_kinds = method
dotnet_naming_symbols.methods.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.methods.required_modifiers =

dotnet_naming_symbols.properties.applicable_kinds = property
dotnet_naming_symbols.properties.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.properties.required_modifiers =

dotnet_naming_symbols.public_fields.applicable_kinds = field
dotnet_naming_symbols.public_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_fields.required_modifiers =

dotnet_naming_symbols.private_fields.applicable_kinds = field
dotnet_naming_symbols.private_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_fields.required_modifiers =

dotnet_naming_symbols.private_static_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_fields.required_modifiers = static

dotnet_naming_symbols.types_and_namespaces.applicable_kinds = namespace, class, struct, interface, enum
dotnet_naming_symbols.types_and_namespaces.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.types_and_namespaces.required_modifiers =

dotnet_naming_symbols.non_field_members.applicable_kinds = property, event, method
dotnet_naming_symbols.non_field_members.applicable_accessibilities = public, internal, private, protected, protected_internal, private_protected
dotnet_naming_symbols.non_field_members.required_modifiers =

dotnet_naming_symbols.type_parameters.applicable_kinds = type_parameter
dotnet_naming_symbols.type_parameters.applicable_accessibilities = *
dotnet_naming_symbols.type_parameters.required_modifiers =

dotnet_naming_symbols.private_constant_fields.applicable_kinds = field
dotnet_naming_symbols.private_constant_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_constant_fields.required_modifiers = const

dotnet_naming_symbols.local_variables.applicable_kinds = local
dotnet_naming_symbols.local_variables.applicable_accessibilities = local
dotnet_naming_symbols.local_variables.required_modifiers =

dotnet_naming_symbols.local_constants.applicable_kinds = local
dotnet_naming_symbols.local_constants.applicable_accessibilities = local
dotnet_naming_symbols.local_constants.required_modifiers = const

dotnet_naming_symbols.parameters.applicable_kinds = parameter
dotnet_naming_symbols.parameters.applicable_accessibilities = *
dotnet_naming_symbols.parameters.required_modifiers =

dotnet_naming_symbols.public_constant_fields.applicable_kinds = field
dotnet_naming_symbols.public_constant_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_constant_fields.required_modifiers = const

dotnet_naming_symbols.public_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.public_static_readonly_fields.applicable_accessibilities = public, internal
dotnet_naming_symbols.public_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.private_static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.private_static_readonly_fields.applicable_accessibilities = private, protected, protected_internal, private_protected
dotnet_naming_symbols.private_static_readonly_fields.required_modifiers = readonly, static

dotnet_naming_symbols.local_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_functions.required_modifiers =

dotnet_naming_symbols.async_methods.applicable_kinds = method
dotnet_naming_symbols.async_methods.applicable_accessibilities = *
dotnet_naming_symbols.async_methods.required_modifiers = async

dotnet_naming_symbols.local_async_functions.applicable_kinds = local_function
dotnet_naming_symbols.local_async_functions.applicable_accessibilities = *
dotnet_naming_symbols.local_async_functions.required_modifiers = async

## Naming styles

dotnet_naming_style.pascalcase.capitalization = pascal_case

dotnet_naming_style.ipascalcase.required_prefix = I
dotnet_naming_style.ipascalcase.capitalization = pascal_case

dotnet_naming_style.tpascalcase.required_prefix = T
dotnet_naming_style.tpascalcase.capitalization = pascal_case

dotnet_naming_style._camelcase.required_prefix = _
dotnet_naming_style._camelcase.capitalization = camel_case

dotnet_naming_style.camelcase.capitalization = camel_case

dotnet_naming_style.s_camelcase.required_prefix = s_
dotnet_naming_style.s_camelcase.capitalization = camel_case

dotnet_naming_style.pascalcase_async.required_suffix = Async
dotnet_naming_style.pascalcase_async.capitalization = pascal_case


#### Analyzers ####

# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-quality-rule-options

# All rules syntax: dotnet_code_quality.<OptionName> = <OptionValue>
# Category of rules syntax: dotnet_code_quality.<RuleCategory>.<OptionName> = <OptionValue>
# Specific rule syntax: dotnet_code_quality.<RuleId>.<OptionName> = <OptionValue>
# RuleCategory: Design, Documentation, Globalization, Interoperability, Maintainability, Naming, Performance, SingleFile, Reliability, Security,Usage
# api_surface OptionValue: public, internal [or friend], private, all

## Analyzer accessibility settings
dotnet_code_quality.api_surface = all

## CodeQuality
dotnet_diagnostic.IDE0051.severity = warning        # IDE0051: Remove unused private member
dotnet_diagnostic.IDE0052.severity = warning        # IDE0052: Remove unread private member
dotnet_diagnostic.IDE0064.severity = warning        # IDE0064: Make struct fields writable
dotnet_diagnostic.IDE0076.severity = warning        # IDE0076: Remove invalid global 'SuppressMessageAttribute'
dotnet_diagnostic.IDE0077.severity = warning        # IDE0077: Avoid legacy format target in global 'SuppressMessageAttribute'

## Compiler
# dotnet_diagnostic.IDE0043.severity = none         # IDE0043: Format string contains invalid placeholder [note: Deprecate IDE0043 in favor of CA2241]
# CA1848: Use the LoggerMessage delegates
dotnet_diagnostic.CA1848.severity = none                # CA1848: Use the LoggerMessage delegates

## Style
dotnet_diagnostic.IDE0001.severity = suggestion     # IDE0001: Simplify name
dotnet_diagnostic.IDE0002.severity = suggestion     # IDE0002: Simplify member access
dotnet_diagnostic.IDE0003.severity = none           # IDE0003: Remove 'this' or 'Me' qualification
dotnet_diagnostic.IDE0004.severity = warning        # IDE0004: Remove unnecessary cast
dotnet_diagnostic.IDE0005.severity = warning        # IDE0005: Remove unnecessary import
dotnet_diagnostic.IDE0007.severity = none           # IDE0007: Use 'var' instead of explicit type
dotnet_diagnostic.IDE0008.severity = warning        # IDE0008: Use explicit type instead of 'var'
dotnet_diagnostic.IDE0009.severity = none           # IDE0009: Add 'this' or 'Me' qualification
dotnet_diagnostic.IDE0010.severity = warning        # IDE0010: Add missing cases to switch statement
dotnet_diagnostic.IDE0011.severity = warning        # IDE0011: Add braces
dotnet_diagnostic.IDE0016.severity = warning        # IDE0016: Use throw expression
dotnet_diagnostic.IDE0017.severity = warning        # IDE0017: Use object initializers
dotnet_diagnostic.IDE0018.severity = warning        # IDE0018: Inline variable declaration
dotnet_diagnostic.IDE0019.severity = warning        # IDE0019: Use pattern matching to avoid 'as' followed by a 'null' check
dotnet_diagnostic.IDE0020.severity = warning        # IDE0020: Use pattern matching to avoid 'is' check followed by a cast (with variable)
dotnet_diagnostic.IDE0021.severity = warning        # IDE0021: Use expression body for constructors
dotnet_diagnostic.IDE0022.severity = warning        # IDE0022: Use expression body for methods
dotnet_diagnostic.IDE0023.severity = none           # IDE0023: Use expression body for conversion operators
dotnet_diagnostic.IDE0024.severity = warning        # IDE0024: Use block body for operators
dotnet_diagnostic.IDE0025.severity = warning        # IDE0025: Use expression body for properties
dotnet_diagnostic.IDE0026.severity = warning        # IDE0026: Use expression body for indexers
dotnet_diagnostic.IDE0027.severity = warning        # IDE0027: Use expression body for accessors
dotnet_diagnostic.IDE0028.severity = warning        # IDE0028: Use collection initializers
dotnet_diagnostic.IDE0029.severity = warning        # IDE0029: Null check can be simplified (ternary conditional check)
dotnet_diagnostic.IDE0030.severity = warning        # IDE0030: Null check can be simplified (nullable ternary conditional check)
dotnet_diagnostic.IDE0031.severity = warning        # IDE0031: Use null propagation
dotnet_diagnostic.IDE0032.severity = warning        # IDE0032: Use auto propertys
dotnet_diagnostic.IDE0033.severity = warning        # IDE0033: Use explicitly provided tuple name
dotnet_diagnostic.IDE0034.severity = warning        # IDE0034: Simplify 'default' expression
dotnet_diagnostic.IDE0035.severity = none           # IDE0035: Remove unreachable code [note: Compiler Warning (level 2) CS0162: Unreachable code detected]
dotnet_diagnostic.IDE0036.severity = warning        # IDE0036: Order modifiers
dotnet_diagnostic.IDE0037.severity = warning        # IDE0037: Use inferred member name
dotnet_diagnostic.IDE0038.severity = warning        # IDE0038: Use pattern matching to avoid 'is' check followed by a cast (without variable)
dotnet_diagnostic.IDE0039.severity = warning        # IDE0039: Use local function instead of lambda
dotnet_diagnostic.IDE0040.severity = warning        # IDE0040: Add accessibility modifiers
dotnet_diagnostic.IDE0041.severity = warning        # IDE0041: Use is null check
dotnet_diagnostic.IDE0042.severity = suggestion     # IDE0042: Deconstruct variable declaration
dotnet_diagnostic.IDE0044.severity = warning        # IDE0044: Add readonly modifier
dotnet_diagnostic.IDE0045.severity = warning        # IDE0045: Use conditional expression for assignment
dotnet_diagnostic.IDE0046.severity = warning        # IDE0046: Use conditional expression for return
dotnet_diagnostic.IDE0047.severity = warning        # IDE0047: Remove unnecessary parentheses
dotnet_diagnostic.IDE0048.severity = warning        # IDE0048: Add parentheses for clarity
dotnet_diagnostic.IDE0049.severity = warning        # IDE0049: Use language keywords instead of framework type names for type references
dotnet_diagnostic.IDE0050.severity = suggestion     # IDE0050: Convert anonymous type to tuple
dotnet_diagnostic.IDE0053.severity = warning        # IDE0053: Use expression body for lambdas
dotnet_diagnostic.IDE0054.severity = warning        # IDE0054: Use compound assignment
dotnet_diagnostic.IDE0055.severity = warning        # IDE0055: Formatting rule
dotnet_diagnostic.IDE0056.severity = warning        # IDE0056: Use index operator
dotnet_diagnostic.IDE0057.severity = warning        # IDE0057: Use range operator
dotnet_diagnostic.IDE0058.severity = none           # IDE0058: Remove unnecessary expression value
dotnet_diagnostic.IDE0059.severity = warning        # IDE0059: Remove unnecessary value assignment
dotnet_diagnostic.IDE0060.severity = suggestion     # IDE0060: Remove unused parameter
dotnet_diagnostic.IDE0061.severity = warning        # IDE0061: Use expression body for local functions
dotnet_diagnostic.IDE0062.severity = warning        # IDE0062: Make local function static
dotnet_diagnostic.IDE0063.severity = warning        # IDE0063: Use simple 'using' statement
dotnet_diagnostic.IDE0065.severity = warning        # IDE0065: 'using' directive placement
dotnet_diagnostic.IDE0066.severity = warning        # IDE0066: Use switch expression
dotnet_diagnostic.IDE0070.severity = warning        # IDE0070: Use 'System.HashCode.Combine'
dotnet_diagnostic.IDE0071.severity = warning        # IDE0071: Simplify interpolation
dotnet_diagnostic.IDE0072.severity = warning        # IDE0072: Add missing cases to switch expression
dotnet_diagnostic.IDE0073.severity = warning        # IDE0073: Use file header
dotnet_diagnostic.IDE0074.severity = warning        # IDE0074: Use coalesce compound assignment
dotnet_diagnostic.IDE0075.severity = warning        # IDE0075: Simplify conditional expression
dotnet_diagnostic.IDE0078.severity = warning        # IDE0078: Use pattern matching
dotnet_diagnostic.IDE0079.severity = warning        # IDE0079: Remove unnecessary suppression
dotnet_diagnostic.IDE0080.severity = warning        # IDE0080: Remove unnecessary suppression operator
dotnet_diagnostic.IDE0082.severity = warning        # IDE0082: Convert 'typeof' to 'nameof'
dotnet_diagnostic.IDE0083.severity = warning        # IDE0083: Use pattern matching ('not' operator)
dotnet_diagnostic.IDE0090.severity = warning        # IDE0090: Simplify 'new' expression
dotnet_diagnostic.IDE0100.severity = warning        # IDE0100: Remove unnecessary equality operator
dotnet_diagnostic.IDE0110.severity = warning        # IDE0110: Remove unnecessary discard
dotnet_diagnostic.IDE0120.severity = warning        # IDE0120: Simplify LINQ expression
dotnet_diagnostic.IDE0130.severity = warning        # IDE0130: Namespace does not match folder structure
dotnet_diagnostic.IDE0150.severity = warning        # IDE0150: Prefer 'null' check over type check
dotnet_diagnostic.IDE0160.severity = warning        # IDE0160: Use block-scoped namespace
dotnet_diagnostic.IDE0161.severity = none           # IDE0161: Use file-scoped namespace
dotnet_diagnostic.IDE0170.severity = warning        # IDE0170: Simplify property pattern
dotnet_diagnostic.IDE0180.severity = warning        # IDE0180: Use tuple to swap values
dotnet_diagnostic.IDE0200.severity = warning        # IDE0200: Remove unnecessary lambda expression
dotnet_diagnostic.IDE0210.severity = none           # IDE0210: Convert to top-level statements
dotnet_diagnostic.IDE0211.severity = none           # IDE0211: Convert to 'Program.Main' style program
dotnet_diagnostic.IDE0220.severity = warning        # IDE0220: Add explicit cast in foreach loop
dotnet_diagnostic.IDE0230.severity = suggestion     # IDE0230: Use UTF-8 string literal
dotnet_diagnostic.IDE0240.severity = warning        # IDE0240: Nullable directive is redundant
dotnet_diagnostic.IDE0241.severity = warning        # IDE0241: Nullable directive is unnecessary
dotnet_diagnostic.IDE0250.severity = warning        # IDE0250: Struct can be made 'readonly'
dotnet_diagnostic.IDE0251.severity = warning        # IDE0251: Member can be made 'readonly'
dotnet_diagnostic.IDE0260.severity = warning        # IDE0260: Use pattern matching
dotnet_diagnostic.IDE0270.severity = warning        # IDE0270: Null check can be simplified (if null check)
dotnet_diagnostic.IDE0280.severity = warning        # IDE0280: Use 'nameof'
dotnet_diagnostic.IDE0290.severity = error          # IDE0290  Use primary constructor [note: C# 12 feature]
dotnet_diagnostic.IDE1005.severity = warning        # IDE1005: Use conditional delegate call
dotnet_diagnostic.IDE1006.severity = warning        # IDE1006: Naming styles
dotnet_diagnostic.IDE2000.severity = warning        # IDE2000: Allow multiple blank lines
dotnet_diagnostic.IDE2001.severity = warning        # IDE2001: Allow embedded statements on same line
dotnet_diagnostic.IDE2002.severity = warning        # IDE2002: Allow blank lines between consecutive braces
dotnet_diagnostic.IDE2003.severity = warning        # IDE2003: Allow statement immediately after block
dotnet_diagnostic.IDE2004.severity = warning        # IDE2004: Allow blank line after colon in constructor initializer
dotnet_diagnostic.IDE2005.severity = warning        # IDE2005: Allow blank line after token in conditional expression
dotnet_diagnostic.IDE2006.severity = warning        # IDE2006: Allow blank line after token in arrow expression
