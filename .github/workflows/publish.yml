# This workflow will publish the project

name: Publish

on:
  workflow_dispatch:
    inputs:
      config-file:
        type: string
        default: "./publish/config.json"

      target-os:
        type: choice
        default: all
        options: 
        - windows
        - linux
        - macos
        - all

      target-runtime:
        type: choice
        default: all
        options: 
        - x86
        - x64
        - arm
        - arm64
        - all
  release:
    types: [published]

env:
  dotnet-version: 8.x
  default-config-file: "./publish/config.json"
  default-target-os: all
  default-target-runtime: all

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.publish-config-parser.outputs.profiles }}
      status: ${{ steps.checker.outputs.status }}
      project-file: ${{ steps.publish-config-parser.outputs.project-file }}
      output-name: ${{ steps.publish-config-parser.outputs.output-name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - id: inputs
      shell: bash
      run: |
        config_file='${{ github.event.inputs.config-file }}'
        target_os='${{ github.event.inputs.target-os }}'
        target_runtime='${{ github.event.inputs.target-runtime }}'

        echo "config-file=${config_file:=${{ env.default-config-file }}}" >> $GITHUB_OUTPUT
        echo "target-os=${target_os:=${{ env.default-target-os }}}" >> $GITHUB_OUTPUT
        echo "target-runtime=${target_runtime:=${{ env.default-target-runtime }}}" >> $GITHUB_OUTPUT

    - name: Parse configuration "${{ github.event.inputs.config-file }}"
      id: publish-config-parser
      uses: ./.github/actions/publish-config-parser
      with:
        config-file: ${{ env.config-file }}
        tags: "${{ env.target-os }},${{ env.target-runtime }}"
      env:
        config-file: ${{ steps.inputs.outputs.config-file }}
        target-os: ${{ steps.inputs.outputs.target-os }}
        target-runtime: ${{ steps.inputs.outputs.target-runtime }}

    - name: Check profiles
      id: checker
      run: |
        profiles='${{ steps.publish-config-parser.outputs.profiles }}'
        length=$( echo $profiles | jq '.include | length' )

        if(( $length > 0 )); then
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "No suitable publish profile found"
        fi

  publish:
    name: Publish
    needs: prepare
    if: needs.prepare.outputs.status == 'success'

    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    env:
      output-name: ${{ needs.prepare.outputs.output-name }}
      project-file: ${{ needs.prepare.outputs.project-file }}
      configuration: ${{ matrix.configuration }}
      framework: ${{ matrix.framework }}
      runtime: ${{ matrix.runtime }}
      publish-options: ${{ matrix.options }}
      output-path: 'publish/output/${{ matrix.configuration }}/${{ matrix.framework }}/${{ matrix.runtime }}'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.dotnet-version }}

    - id: version-number
      uses: finebits/github-actions/version-number@v1

    - name: Publish ${{ env.output-name }} [${{ env.version-short }}]
      run: |
        dotnet publish "${{ env.project-file }}" --output "${{ env.output-path }}" --configuration "${{ env.configuration }}" --framework "${{ env.framework }}" --runtime "${{ env.runtime }}" --property:Version="${{ env.version-full }}" ${{ env.publish-options }} 
      env:
        version-full: "${{ steps.version-number.outputs.suffix-githash-version }}"
        version-short: "${{ steps.version-number.outputs.suffix-version }}"

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: "${{ env.output-name }}-${{ env.runtime }} [${{ env.version-short }}]"
        path: "${{ env.output-path }}"
      env:
        artifact-name: "${{ env.output-name }}"
        version-short: "${{ steps.version-number.outputs.suffix-version }}"

  upload-assets:
    name: Upload Assets
    if: github.event_name == 'release'
    needs: publish
    permissions:
      contents: write

    runs-on: ubuntu-latest

    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Upload All Assets
      uses: finebits/github-actions/upload-release-asset@v1
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.event.release.tag_name }}
        path: "artifacts/*"
