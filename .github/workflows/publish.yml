# This workflow will publish the project

name: Publish

on:
  workflow_dispatch:
    inputs:
      config-file:
        type: string
        default: "./publish/config.json"

      target-os:
        type: choice
        default: all
        options: 
        - windows
        - linux
        - macos
        - all

      target-runtime:
        type: choice
        default: all
        options: 
        - x86
        - x64
        - arm
        - arm64
        - all

      trusted-signing:
        type: boolean
        default: true

  release:
    types: [published]

env:
  default-config-file: "./publish/config.json"
  default-target-os: all
  default-target-runtime: all
  default-trusted-signing: true

jobs:
  prepare:
    name: Prepare
    runs-on: ubuntu-latest

    outputs:
      target-os: ${{ steps.inputs.outputs.target-os }}
      target-runtime: ${{ steps.inputs.outputs.target-runtime }}
      trusted-signing: ${{ steps.inputs.outputs.trusted-signing }}
      matrix: ${{ steps.select-config.outputs.matrix }}
      project-file: ${{ fromJSON(steps.read-options.outputs.content).project-file }}
      output-name: ${{ fromJSON(steps.read-options.outputs.content).output-name }}

    steps:
    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0
        submodules: recursive

    - id: inputs
      shell: bash
      run: |
        config_file='${{ github.event.inputs.config-file }}'
        target_os='${{ github.event.inputs.target-os }}'
        target_runtime='${{ github.event.inputs.target-runtime }}'
        trusted_signing='${{ github.event.inputs.target-runtime }}'

        echo "config-file=${config_file:=${{ env.default-config-file }}}" >> $GITHUB_OUTPUT
        echo "target-os=${target_os:=${{ env.default-target-os }}}" >> $GITHUB_OUTPUT
        echo "target-runtime=${target_runtime:=${{ env.default-target-runtime }}}" >> $GITHUB_OUTPUT
        echo "trusted-signing=${trusted_signing:=${{ env.default-trusted-signing }}}" >> $GITHUB_OUTPUT

    - name: Read options "${{ github.event.inputs.config-file }}"
      id: read-options
      uses: finebits/github-actions/toolset/file/read@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0
      with:
        file: ${{ steps.inputs.outputs.config-file }}

    - name: Select configuration "${{ github.event.inputs.config-file }}"
      id: select-config
      uses: finebits/github-actions/toolset/select-configuration@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0
      with:
        json-file: ${{ env.config-file }}
        configs-set-jsonpath: ".profiles"
        keywords-set-jsonpath: ".tags"
        keywords: |
          ${{ env.target-os }}
          ${{ env.target-runtime }}
      env:
        config-file: ${{ steps.inputs.outputs.config-file }}
        target-os: ${{ steps.inputs.outputs.target-os }}
        target-runtime: ${{ steps.inputs.outputs.target-runtime }}

    - name: Check profiles
      id: checker
      run: |
        length=$( echo '${{ steps.select-config.outputs.config-json }}' | jq '. | length' )

        if(( $length == 0 )); then
          echo "::error::No suitable publish configuration found"
          exit 1
        fi

  publish:
    name: Publish
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}

    outputs:
      artifact-version: "${{ steps.version.outputs.artifact }}"

    env:
      dotnet-version: ${{ matrix.dotnet }}
      output-name: ${{ needs.prepare.outputs.output-name }}
      project-file: ${{ needs.prepare.outputs.project-file }}
      configuration: ${{ matrix.configuration }}
      framework: ${{ matrix.framework }}
      runtime: ${{ matrix.runtime }}
      publish-options: ${{ matrix.options }}
      output-path: '.publish/output/bin/${{ matrix.configuration }}/${{ matrix.framework }}/${{ matrix.runtime }}'

    steps:
    - name: Support longpaths
      if: ${{ runner.os == 'Windows'}}
      run: git config --system core.longpaths true

    - name: Checkout
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Install .NET
      uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0
      with:
        dotnet-version: ${{ env.dotnet-version }}

    - id: assign-version
      uses: finebits/github-actions/toolset/assign-version@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0

    - id: version
      shell: bash
      run: |
        echo "app=${{ steps.assign-version.outputs.preset-semantic-v2-extended }}e" >> $GITHUB_OUTPUT
        echo "artifact=${{ steps.assign-version.outputs.preset-semantic-v1 }}+${{ steps.assign-version.outputs.today }}.${{ steps.assign-version.outputs.run-number }}" >> $GITHUB_OUTPUT

    - uses: finebits/github-actions/toolset/file/replace-text@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0
      with:
        file: ./src/Eppie.CLI/Eppie.CLI/Options/AuthorizationOptions.cs
        find-what: '\"<Gmail-ClientId>\"'
        replace-with: "${{ secrets.GMAIL_CLIENT_ID }}"

    - uses: finebits/github-actions/toolset/file/replace-text@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0
      with:
        file: ./src/Eppie.CLI/Eppie.CLI/Options/AuthorizationOptions.cs
        find-what: '\"<Gmail-ClientSecret>\"'
        replace-with: "${{ secrets.GMAIL_CLIENT_SECRET }}"

    - uses: finebits/github-actions/toolset/file/replace-text@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0
      with:
        file: ./src/Eppie.CLI/Eppie.CLI/Options/AuthorizationOptions.cs
        find-what: '\"<Outlook-ClientId>\"'
        replace-with: "${{ secrets.OUTLOOK_CLIENT_ID }}"

    - name: Publish ${{ env.output-name }} [${{ steps.assign-version.outputs.preset-semantic-v1 }}]
      shell: bash
      run: |
        dotnet publish "${{ env.project-file }}" --output "${{ env.output-path }}" --configuration "${{ env.configuration }}" \
                       --framework "${{ env.framework }}" --runtime "${{ env.runtime }}" \
                       --property:Version="${{ env.version-app }}" \
                       ${{ env.publish-options }} 
      env:
        version-app: "${{ steps.version.outputs.app }}"

    - name: Check AZURE secrets
      if: ${{ runner.os == 'Windows' && needs.prepare.outputs.trusted-signing == 'true' }}
      id: check-azure-secrets
      shell: bash
      run: |
        exist=true

        if [ "${{ secrets.AZURE_TENANT_ID }}" == "" ]; then
          echo "::warning::'secrets.AZURE_TENANT_ID' is empty"
          exist=false
        fi
        if [ "${{ secrets.AZURE_CLIENT_ID }}" == "" ]; then
          echo "::warning::'secrets.AZURE_CLIENT_ID' is empty"
          exist=false
        fi
        if [ "${{ secrets.AZURE_CLIENT_SECRET }}" == "" ]; then
          echo "::warning::'secrets.AZURE_CLIENT_SECRET' is empty"
          exist=false
        fi
        if [ "${{ secrets.TRUSTED_SIGNING_ACCOUNT_NAME }}" == "" ]; then
          echo "::warning::'secrets.TRUSTED_SIGNING_ACCOUNT_NAME' is empty"
          exist=false
        fi
        if [ "${{ secrets.CERTIFICATE_PROFILE_NAME }}" == "" ]; then
          echo "::warning::'secrets.CERTIFICATE_PROFILE_NAME' is empty"
          exist=false
        fi

        echo "secrets-exist=$exist" >> $GITHUB_OUTPUT

    - name: Sign files with Trusted Signing
      if: ${{ runner.os == 'Windows' && needs.prepare.outputs.trusted-signing == 'true' && steps.check-azure-secrets.outputs.secrets-exist == 'true' }}
      uses: azure/trusted-signing-action@bb15ca63eb5548cc306f4f335c5617bb414abcad # v0.5.9
      with:
        azure-tenant-id: ${{ secrets.AZURE_TENANT_ID }}
        azure-client-id: ${{ secrets.AZURE_CLIENT_ID }}
        azure-client-secret: ${{ secrets.AZURE_CLIENT_SECRET }}
        endpoint: https://neu.codesigning.azure.net/
        trusted-signing-account-name: ${{ secrets.TRUSTED_SIGNING_ACCOUNT_NAME }}
        certificate-profile-name: ${{ secrets.CERTIFICATE_PROFILE_NAME }}
        files-folder: ${{ env.output-path }}
        files-folder-filter: exe
        file-digest: SHA256
        timestamp-rfc3161: http://timestamp.acs.microsoft.com
        timestamp-digest: SHA256

    - name: Upload artifacts
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: "${{ env.artifact-name }}-${{ env.runtime }} [${{ env.artifact-version }}]"
        path: "${{ env.output-path }}"
      env:
        artifact-name: "${{ env.output-name }}"
        artifact-version: "${{ steps.version.outputs.artifact }}"

  appimage-package:
    name: Pack AppImage
    needs: [ prepare, publish ]
    runs-on: ubuntu-latest
    if: ${{ needs.prepare.outputs.target-os == 'all' || needs.prepare.outputs.target-os == 'linux' }}
    strategy:
      matrix: 
        include: 
          - target-runtime: 'x64'
            artifact_pattern: '*linux-x64*'
            appimage-arch: x86_64
          - target-runtime: 'arm64'
            artifact_pattern: '*linux-arm64*'
            appimage-arch: aarch64
          - target-runtime: 'arm'
            artifact_pattern: '*linux-arm*'
            appimage-arch: armhf
    env:
      artifacts-root: './.artifacts'
      output-path: './.publish/output/packages'
      package-app-dir: './packages/appimage-package/AppDir'
      prepare-script: './packages/appimage-package/prepare-AppDir.sh'

    steps:
    - name: Check runtime
      run: |
        go_on=${{ needs.prepare.outputs.target-runtime == 'all' || needs.prepare.outputs.target-runtime == matrix.target-runtime }}
        echo "GITHUB_ACTION_GO_PACK=$go_on" >> $GITHUB_ENV
    
    - name: Checkout
      if: ${{ env.GITHUB_ACTION_GO_PACK == 'true' }}
      uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        fetch-depth: 0
        submodules: recursive

    - name: Setup appimagetool
      if: ${{ env.GITHUB_ACTION_GO_PACK == 'true' }}
      uses: finebits/github-actions/package/appimage/setup-appimagetool@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0

    - name: Download ${{ matrix.artifact_pattern }} Artifacts
      if: ${{ env.GITHUB_ACTION_GO_PACK == 'true' }}
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        path: "${{ env.artifacts-root }}"
        pattern: "${{ matrix.artifact_pattern }}"

    - name: Prepare Package
      if: ${{ env.GITHUB_ACTION_GO_PACK == 'true' }}
      shell: bash
      run: |
        item=$(find "${{ env.artifacts-root }}" -name "${{ matrix.artifact_pattern }}" | head -n 1)
        if [ ! -d "$item" ] ; then
          echo "::error::Artifact '${{ matrix.artifact_pattern }}' not found."
          exit 1
        fi

        echo "$(bash "${{ env.prepare-script }}" "$item")"
        mkdir -p "${{ env.output-path }}"

    - name: Pack appimagetool
      if: ${{ env.GITHUB_ACTION_GO_PACK == 'true' }}
      uses: finebits/github-actions/package/appimage/pack@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0
      with:
        package-runtime: ${{ matrix.appimage-arch }}
        package-app-dir: "${{ env.package-app-dir }}"
        package-output-dir: "${{ env.output-path }}"
        
    - name: Read name
      if: ${{ env.GITHUB_ACTION_GO_PACK == 'true' }}
      id: package-name
      shell: bash
      run: |
        item=$(find "${{ env.output-path }}" -name "*.AppImage" | head -n 1)
        if [ ! -f "$item" ] ; then
          echo "::error::AppImage Pacakge '$item' not found."
          exit 1
        fi

        item_name="${item##*/}"
        echo "name=$item_name" >> $GITHUB_OUTPUT

    - name: Upload artifacts
      if: ${{ env.GITHUB_ACTION_GO_PACK == 'true' }}
      uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
      with:
        name: "${{ env.artifact-name }} [${{ env.artifact-version}}]"
        path: "${{ env.output-path }}"
      env:
        artifact-name: "${{ steps.package-name.outputs.name }}"
        artifact-version: "${{ needs.publish.outputs.artifact-version }}"

  upload-assets:
    name: Upload Assets
    if: github.event_name == 'release'
    needs: [ publish, appimage-package ]
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      artifacts-root: './.artifacts'
      assets-root: './.assets'

    steps:
    - name: Download All Artifacts
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        path: "${{ env.artifacts-root }}"

    - name: Prepare Assets
      shell: bash
      run: |
        asset_root="${{ env.assets-root }}"
        mkdir -p "${asset_root}"

        artifact_pattern="${{ env.artifacts-root }}/*"
        for item in $artifact_pattern ; do
          if [ -d "$item" ] ; then
            item_name="${item##*/}"

            # remove version
            asset_name="${item_name% [*}"

            if [[ "$asset_name" == *"-osx-"* || "$asset_name" == *"-linux-"* ]]; then
              tar -czf "$asset_root/${asset_name}.tar.gz" -C "$item" . && echo "Archiving of the asset '$asset_name' has been completed successfully." || echo "::warning::Failed to archive asset '$asset_name'"
            elif [[ "$asset_name" == *"-win-"* ]]; then
              zip -rjq "$asset_root/${asset_name}.zip" "$item" && echo "Archiving of the asset '$asset_name' has been completed successfully." || echo "::warning::Failed to archive asset '$asset_name'"
            elif [[ "$asset_name" == *".AppImage" ]]; then
              file=$(find "$item" -name "*.AppImage" | head -n 1)
              echo "package: ${file}"
              cp "${file}" "$asset_root" && echo "Copying of the asset '$asset_name' has been completed successfully." || echo "::warning::Failed to copy asset '$asset_name'"
            else
              echo "::warning::Unknown asset type: '$asset_name'"
            fi
          fi
        done

    - name: Upload All Assets
      uses: finebits/github-actions/toolset/github/upload-release-asset@39ec051fda4f00ab2ac5ffb6336ab0ea1ad9ad0f # v3.0.0
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.event.release.tag_name }}
        path: "${{ env.assets-root }}/*"
